import { OnInit, EventEmitter, Provider } from '@angular/core';
import { CalendarMonth, CalendarModalOptions, CalendarComponentOptions, CalendarDay, CalendarComponentPayloadTypes, CalendarComponentMonthChange, CalendarComponentTypeProperty } from '../calendar.model';
import { CalendarService } from '../services/calendar.service';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare const ION_CAL_VALUE_ACCESSOR: Provider;
export declare class CalendarComponent implements ControlValueAccessor, OnInit {
    calSvc: CalendarService;
    _d: CalendarModalOptions | any;
    _options: CalendarComponentOptions | any;
    _view: 'month' | 'days';
    _calendarMonthValue: CalendarDay[] | any;
    _showToggleButtons: boolean;
    get showToggleButtons(): boolean;
    set showToggleButtons(value: boolean);
    _showMonthPicker: boolean;
    get showMonthPicker(): boolean;
    set showMonthPicker(value: boolean);
    monthOpt: CalendarMonth | any;
    format: string;
    type: CalendarComponentTypeProperty;
    readonly: boolean;
    change: EventEmitter<CalendarComponentPayloadTypes>;
    monthChange: EventEmitter<CalendarComponentMonthChange>;
    select: EventEmitter<CalendarDay>;
    selectStart: EventEmitter<CalendarDay>;
    selectEnd: EventEmitter<CalendarDay>;
    set options(value: CalendarComponentOptions);
    get options(): CalendarComponentOptions;
    readonly MONTH_DATE_FORMAT = "MMMM yyyy";
    constructor(calSvc: CalendarService);
    ngOnInit(): void;
    getViewDate(): CalendarComponentPayloadTypes;
    getDate(date: number): Date;
    setViewDate(value: CalendarComponentPayloadTypes): void;
    switchView(): void;
    prev(): void;
    next(): void;
    prevYear(): void;
    nextYear(): void;
    nextMonth(): void;
    canNext(): boolean;
    backMonth(): void;
    canBack(): boolean;
    monthOnSelect(month: number): void;
    onChanged($event: CalendarDay[]): void;
    swipeEvent($event: any): void;
    _onChanged: Function;
    _onTouched: Function;
    _payloadToTimeNumber(value: CalendarComponentPayloadTypes): number;
    _monthFormat(date: number): string;
    private initOpt;
    createMonth(date: number): CalendarMonth;
    _createCalendarDay(value: CalendarComponentPayloadTypes): CalendarDay;
    _handleType(value: number): CalendarComponentPayloadTypes;
    writeValue(obj: any): void;
    registerOnChange(fn: () => {}): void;
    registerOnTouched(fn: () => {}): void;
    _writeValue(value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CalendarComponent, "ion-calendar", never, { "format": { "alias": "format"; "required": false; }; "type": { "alias": "type"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "options": { "alias": "options"; "required": false; }; }, { "change": "change"; "monthChange": "monthChange"; "select": "select"; "selectStart": "selectStart"; "selectEnd": "selectEnd"; }, never, never, false, never>;
}
